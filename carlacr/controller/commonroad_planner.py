from typing import Optional
import carla
from commonroad.scenario.state import TraceState
from commonroad.scenario.scenario import Scenario, ScenarioID

from carlacr.helper.planner import TrajectoryPlannerInterface
from carlacr.controller.controller import CarlaController


def create_scenario_from_world(world: carla.World) -> Scenario:
    """
    Creates scenario without prediction from CARLA world.

    :param world: CARLA world.
    :return: CommonRoad scenario.
    """
    print(world.id)
    return Scenario(0.1, ScenarioID(), "")


class CommonRoadPlannerController(CarlaController):
    """Controller which uses trajectory generated by CommonRoad planner as input."""

    def __init__(self, actor: carla.Actor, planner: TrajectoryPlannerInterface):
        """
        Initialization of CommonRoad planner controller.

        :param actor: CARLA actor.
        :param planner: CommonRoad planner.
        """
        super().__init__(actor)
        self._planner = planner
        self._current_trajectory = None

    def control(self, state: Optional[TraceState] = None):
        """
        Computes and applies CARLA steering wheel control.

        :param state: State which should be reached at next time step.
        """
        world = self._actor.get_world()
        sc = create_scenario_from_world(world)
        print(sc.author)
        # pp = get_planning_problem_from_world()
        # self._current_trajectory = self._planner.plan(sc)
